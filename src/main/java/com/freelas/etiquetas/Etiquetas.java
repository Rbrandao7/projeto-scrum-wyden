/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.freelas.etiquetas;

import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeFactory;

/**
 *
 * @author rodri
 */
public class Etiquetas extends javax.swing.JFrame {

    /**
     * Creates new form Etiquetas
     */
    private List<Etiqueta> listaEtiquetasSelecionadas = new ArrayList<>();
    private EtiquetaDAO etiquetaDAO;
    private List<Etiqueta> listaEtiquetas;
    private File imagemAnexar;

    public Etiquetas() {
        initComponents();

        setExtendedState(this.MAXIMIZED_BOTH);

        try {
            this.etiquetaDAO = new EtiquetaDAO();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao ler o arquivo de banco de dados!");
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

        //atualizaListaInput();
        listaEtiquetas = etiquetaDAO.getListaDeEtiquetasOrdenadaPorCodigo();

        atualizarTabelaDeCadastroEtiquetas(listaEtiquetas);

        atualizaListaEtiquetasDisponiveis();

   //     this.checkBoxRegistroRelatorio.setSelected(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        inputQuantidade = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaQuantidade = new javax.swing.JTable();
        btnGerarPDF = new javax.swing.JButton();
        labelCodigo = new javax.swing.JLabel();
        btnExcluirLinha = new javax.swing.JButton();
        btnLimparTabela = new javax.swing.JButton();
        comboModeloEtiqueta = new javax.swing.JComboBox<>();
        inputAutoComplete = new javax.swing.JTextField();
        inputCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnExcluirEtiqueta = new javax.swing.JButton();
        btnCadastrarEtiqueta = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaEtiquetas = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 100), new java.awt.Dimension(0, 100), new java.awt.Dimension(32767, 100));
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaEtiquetasSelecao = new javax.swing.JTable();
        lblFoto = new javax.swing.JLabel();
        btnCarregarFoto = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        inputLabel = new javax.swing.JTextField();
        btnRelatorio = new javax.swing.JButton();
        inputEAN = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnRegistrarRelatorio = new javax.swing.JButton();
        btnCadastrarEtiqueta2 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gerador De Etiquetas");
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 320, 80, -1));

        inputQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputQuantidadeActionPerformed(evt);
            }
        });
        inputQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputQuantidadeKeyReleased(evt);
            }
        });
        getContentPane().add(inputQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 280, 80, 34));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quantidade");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1102, 250, 80, -1));

        jLabel2.setText("Etiqueta");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, -1, -1));

        tabelaQuantidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Etiqueta", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaQuantidade);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 190, 404, 600));

        btnGerarPDF.setText("GERAR");
        btnGerarPDF.setToolTipText("");
        btnGerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarPDFActionPerformed(evt);
            }
        });
        getContentPane().add(btnGerarPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(1430, 820, 122, -1));

        labelCodigo.setBackground(new java.awt.Color(255, 255, 255));
        labelCodigo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        getContentPane().add(labelCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1435, 6, 111, -1));

        btnExcluirLinha.setText("EXCLUIR");
        btnExcluirLinha.setToolTipText("");
        btnExcluirLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirLinhaActionPerformed(evt);
            }
        });
        getContentPane().add(btnExcluirLinha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 820, 122, -1));

        btnLimparTabela.setText("LIMPAR");
        btnLimparTabela.setToolTipText("");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimparTabela, new org.netbeans.lib.awtextra.AbsoluteConstraints(1570, 820, 122, -1));

        comboModeloEtiqueta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Modelo 21 - COD BAR", "Modelo 40 - COD BAR", "Modelo 21", "Modelo 40" }));
        getContentPane().add(comboModeloEtiqueta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 130, 185, 36));

        inputAutoComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputAutoCompleteActionPerformed(evt);
            }
        });
        inputAutoComplete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputAutoCompleteKeyReleased(evt);
            }
        });
        getContentPane().add(inputAutoComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 130, 268, 31));
        getContentPane().add(inputCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 56, 133, 31));

        jLabel3.setText("Código");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 63, 53, -1));

        btnExcluirEtiqueta.setText("Excluir");
        btnExcluirEtiqueta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirEtiquetaActionPerformed(evt);
            }
        });
        getContentPane().add(btnExcluirEtiqueta, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 100, 31));

        btnCadastrarEtiqueta.setText("Cadastrar");
        btnCadastrarEtiqueta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarEtiquetaActionPerformed(evt);
            }
        });
        getContentPane().add(btnCadastrarEtiqueta, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 100, 31));

        tabelaEtiquetas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Label"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEtiquetas.getTableHeader().setReorderingAllowed(false);
        tabelaEtiquetas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaEtiquetasMouseClicked(evt);
            }
        });
        tabelaEtiquetas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaEtiquetasKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaEtiquetas);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 220, 400, 570));
        getContentPane().add(filler1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1429, 269, -1, 657));

        tabelaEtiquetasSelecao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Label"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEtiquetasSelecao.getTableHeader().setReorderingAllowed(false);
        tabelaEtiquetasSelecao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaEtiquetasSelecaoMouseClicked(evt);
            }
        });
        tabelaEtiquetasSelecao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaEtiquetasSelecaoKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaEtiquetasSelecao);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, 386, 600));

        lblFoto.setIcon(new javax.swing.ImageIcon("C:\\Users\\rodri\\OneDrive\\Documentos\\Programação\\brilhodalua.com.br\\etiquetas\\resources\\image\\imagem.png")); // NOI18N
        lblFoto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblFoto.setPreferredSize(new java.awt.Dimension(128, 128));
        getContentPane().add(lblFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 440, 210, 220));

        btnCarregarFoto.setText("Foto");
        btnCarregarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarFotoActionPerformed(evt);
            }
        });
        getContentPane().add(btnCarregarFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 130, 31));

        jLabel5.setText("EAN");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 53, -1));
        getContentPane().add(inputLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 133, 30));

        btnRelatorio.setText("RELATÓRIO");
        btnRelatorio.setToolTipText("");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });
        getContentPane().add(btnRelatorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1560, 140, 122, -1));
        getContentPane().add(inputEAN, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 133, 30));

        jLabel6.setText("Label");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 106, 53, -1));

        btnRegistrarRelatorio.setText("REGISTAR NO RELATÓRIO");
        btnRegistrarRelatorio.setToolTipText("");
        btnRegistrarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarRelatorioActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegistrarRelatorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(1400, 860, 190, -1));

        btnCadastrarEtiqueta2.setText("Limpar");
        btnCadastrarEtiqueta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarEtiqueta2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnCadastrarEtiqueta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, 100, 31));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarTabelaDeCadastroEtiquetas(List<Etiqueta> lista) {

        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaEtiquetas.getModel();

        // Limpa a tabela
        modeloTabela.setRowCount(0);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.LEFT);

        tabelaEtiquetas.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tabelaEtiquetas.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

        for (Etiqueta et : lista) {
            if (et.getLabel().toLowerCase().equals("vazia")) {
                continue;
            }
            Object[] dados = {et.getCodigo(), et.getLabel()};
            modeloTabela.addRow(dados);
        }
        Object[] dados = {"VAZIA", "VAZIA"};
        modeloTabela.addRow(dados);

        modeloTabela.fireTableDataChanged();

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        insereDadosNaTabela();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void insereDadosNaTabela() {
        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaQuantidade.getModel();

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        int linhaSelecionada = tabelaEtiquetasSelecao.getSelectedRow();

        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Selecione uma etiqueta na lista!");
            return;
        }
        String codigo = tabelaEtiquetasSelecao.getValueAt(linhaSelecionada, 0).toString();
        String etiqueta = tabelaEtiquetasSelecao.getValueAt(linhaSelecionada, 1).toString();

        if (this.inputQuantidade.getText() == null || this.inputQuantidade.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Defina a quantidade de etiquetas!");
            return;
        }

        // Verifica se a quantidade é um número
        try {
            int a = Integer.parseInt(this.inputQuantidade.getText());

        } catch (NumberFormatException e) {
            System.out.println("Erro ao converter quatidade!");
            this.inputQuantidade.setText("");
            return;

        }
        String quantidade = this.inputQuantidade.getText();

        try {
            Etiqueta ett = etiquetaDAO.getEtiquetaPorCodigo(codigo);
            ett.setQuantidade(quantidade);
            listaEtiquetasSelecionadas.add(ett);
        } catch (SQLException ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

        tabelaQuantidade.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tabelaQuantidade.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        tabelaQuantidade.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

        Object[] dados = {codigo, etiqueta, quantidade};
        modeloTabela.addRow(dados);
        // Limpa os campos 
        this.inputQuantidade.setText("");
        this.inputAutoComplete.setText("");

        atualizaListaEtiquetasDisponiveis();

    }

    private ByteArrayInputStream gerarCodigoBarras(String codigoEtiqueta) {

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            Barcode barcode = BarcodeFactory.createCode128(codigoEtiqueta);

            barcode.setBarWidth(3);
            barcode.setBarHeight(40);
            //  barcode.setDrawingText(false);
            barcode.setAlignmentX(TOP_ALIGNMENT);


            //BufferedImage image = new BufferedImage(400, 100, BufferedImage.TYPE_INT_ARGB);
            
            BufferedImage image = new BufferedImage( barcode.getWidth(), 99, BufferedImage.TYPE_INT_ARGB);

            Graphics2D grafico = image.createGraphics();

            barcode.draw(grafico, 0, 0);

            ImageIO.write(image, "png", baos);

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, "Erro ao tentar a gerar a etiqueta para o item: " + codigoEtiqueta);

        }

        return new ByteArrayInputStream(baos.toByteArray());

    }

    private void btnGerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarPDFActionPerformed

        if (listaEtiquetasSelecionadas.size() < 1) {
            JOptionPane.showMessageDialog(this, "Selecione pelo menos uma etiqueta para impressão!");
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd_MM_yyyy_hh_mm");

        Map<String, String> mapaTipoEtiquetaArquivo = new HashMap<>();
        mapaTipoEtiquetaArquivo.put("Modelo 21", "etiqueta_21.jasper");
        mapaTipoEtiquetaArquivo.put("Modelo 40", "etiqueta_40.jasper");
        mapaTipoEtiquetaArquivo.put("Modelo 21 - COD BAR", "etiqueta_codigo_barras_21.jasper");
        mapaTipoEtiquetaArquivo.put("Modelo 40 - COD BAR", "etiqueta_codigo_barras_40.jasper");

        String tipoEtiqueta = this.comboModeloEtiqueta.getSelectedItem().toString();

        List<Etiqueta> lista = new ArrayList<>();

        for (Etiqueta et : listaEtiquetasSelecionadas) {

            for (int i = 0; i < Integer.parseInt(et.getQuantidade()); i++) {

                if (et.getCodigo().equals("VAZIA")) {
                    et.setCodigo("");
                    et.setLabel("");
                    et.setCodigoEAN("");

                }

                // setar a imagem do código de barras
                if (et.getCodigoEAN() != null && !et.getCodigoEAN().equals("")) {
                    et.setCodigoBarras(gerarCodigoBarras(et.getCodigoEAN()));
                }
                lista.add(et);
            }

        }

        Map<String, Object> mapa = new HashMap<>();
        JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(lista);

        String reportEtiqueta = "resources\\" + mapaTipoEtiquetaArquivo.get(tipoEtiqueta);
        String arquivoSaida = "etiquetas_geradas\\etiquetas_" + tipoEtiqueta.toLowerCase().replaceAll(" ", "_") + "_" + sdf.format(new Date()) + ".pdf";

        try {
            JasperPrint jasperPrint = JasperFillManager.fillReport(reportEtiqueta, mapa, datasource);
            JasperExportManager.exportReportToPdfFile(jasperPrint, arquivoSaida);
            System.out.println("Etiquetas geradas!");

        } catch (JRException ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

        File pdfFile = new File(arquivoSaida);
        try {
            Desktop.getDesktop().browse(pdfFile.toURI());
        } catch (IOException ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Só registra no banco de dados quando o checkbox estiver selecionado
//        if (this.checkBoxRegistroRelatorio.isSelected()) {
//
//            HistoricoDAO historicoDAO;
//            try {
//                historicoDAO = new HistoricoDAO();
//                for (Etiqueta et : listaEtiquetasSelecionadas) {
//
//                    historicoDAO.insertHistorico(et);
//
//                }
//
//            } catch (SQLException ex) {
//                Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }


    }//GEN-LAST:event_btnGerarPDFActionPerformed

    private void inputQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputQuantidadeActionPerformed
        insereDadosNaTabela();      // TODO add your handling code here:

    }//GEN-LAST:event_inputQuantidadeActionPerformed

    private void btnExcluirLinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirLinhaActionPerformed
        int linhaSelecionada = tabelaQuantidade.getSelectedRow();

        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma linha selecionada para exclusão!");
            return;
        }

        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaQuantidade.getModel();
        modeloTabela.removeRow(linhaSelecionada);

        listaEtiquetasSelecionadas.remove(linhaSelecionada);

    }//GEN-LAST:event_btnExcluirLinhaActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
        // TODO add your handling code here:

        DefaultTableModel modeloTabela = (DefaultTableModel) tabelaQuantidade.getModel();
        modeloTabela.setRowCount(0);
        listaEtiquetasSelecionadas.clear();
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void inputQuantidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputQuantidadeKeyReleased

        try {

            int a = Integer.parseInt(this.inputQuantidade.getText());

        } catch (NumberFormatException e) {
            this.inputQuantidade.setText("");
        }

        System.out.println(this.inputQuantidade.getText());
    }//GEN-LAST:event_inputQuantidadeKeyReleased

    private void inputAutoCompleteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputAutoCompleteKeyReleased

        atualizaListaInput();

    }//GEN-LAST:event_inputAutoCompleteKeyReleased

    private void atualizaListaInput() {
        DefaultTableModel tabelaEtiquetasDisponiveis = (DefaultTableModel) tabelaEtiquetasSelecao.getModel();;

        String previaEtiqueta = (String) this.inputAutoComplete.getText();

        // Limpa a tabela
        tabelaEtiquetasDisponiveis.setRowCount(0);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.LEFT);

        tabelaEtiquetas.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tabelaEtiquetas.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

        List<Etiqueta> lista;
        try {
            lista = etiquetaDAO.getEtiquetaPorNome(previaEtiqueta);
            for (Etiqueta et : lista) {
                if (et.getLabel().toLowerCase().equals("vazia")) {
                    continue;
                }
                Object[] dados = {et.getCodigo(), et.getLabel()};
                tabelaEtiquetasDisponiveis.addRow(dados);
            }
            Object[] dados = {"VAZIA", "VAZIA"};
            tabelaEtiquetasDisponiveis.addRow(dados);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void atualizaListaEtiquetasDisponiveis() {

        DefaultTableModel tabelaEtiquetasDisponiveis = (DefaultTableModel) tabelaEtiquetasSelecao.getModel();

        // Limpa a tabela
        tabelaEtiquetasDisponiveis.setRowCount(0);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.LEFT);

        tabelaEtiquetas.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tabelaEtiquetas.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

        List<Etiqueta> lista;

      //  lista = etiquetaDAO.getAllEtiquetas();
        lista = etiquetaDAO.getListaDeEtiquetasOrdenadaPorCodigo();

        for (Etiqueta et : lista) {
            if (et.getLabel().toLowerCase().equals("vazia")) {
                continue;
            }
            Object[] dados = {et.getCodigo(), et.getLabel()};
            tabelaEtiquetasDisponiveis.addRow(dados);
        }
        Object[] dados = {"VAZIA", "VAZIA"};
        tabelaEtiquetasDisponiveis.addRow(dados);

    }

    private void inputAutoCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputAutoCompleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputAutoCompleteActionPerformed

    private void btnExcluirEtiquetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirEtiquetaActionPerformed

        int linhaSelecionada = tabelaEtiquetas.getSelectedRow();

        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma linha selecionada para exclusão!");
            return;
        }

        String codigo = tabelaEtiquetas.getValueAt(linhaSelecionada, 0).toString();
        String label = tabelaEtiquetas.getValueAt(linhaSelecionada, 1).toString();

        try {
            etiquetaDAO.deleteEtiqueta(codigo);
            JOptionPane.showMessageDialog(this, "Etiqueta excluída com sucesso!");
            listaEtiquetas = etiquetaDAO.getListaDeEtiquetasOrdenadaPorCodigo();
            atualizarTabelaDeCadastroEtiquetas(listaEtiquetas);
            atualizaListaEtiquetasDisponiveis();
            limparCampos();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());

        }

    }//GEN-LAST:event_btnExcluirEtiquetaActionPerformed

    private void btnCadastrarEtiquetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarEtiquetaActionPerformed
        String codigo = (String) this.inputCodigo.getText();
        String label = (String) this.inputLabel.getText();
        String codigoEAN = (String) this.inputEAN.getText();
        
// if (codigo == null || codigo.equals("") || label == null || label.equals("") || codigoEAN == null || codigoEAN.equals("")) {
        if (codigo == null || codigo.equals("") || label == null || label.equals("")) {    
            JOptionPane.showMessageDialog(this, "Insira os dados de código, label e EAN corretamente. Há um ou mais campos vazios.");
            return;
        }

        if (this.imagemAnexar == null) {
            JOptionPane.showMessageDialog(this, "Selecione uma imagem para ser anexada!");
            return;
        }

        try {
            // Verifica se a etiqueta já existe
            Etiqueta etiquetaACadastrar = this.etiquetaDAO.getEtiquetaPorCodigo(codigo);
            if (etiquetaACadastrar != null) {
                int resposta = JOptionPane.showConfirmDialog(
                        null,
                        "A etiqueta já existe no banco  de dados, gostaria de atualizar os dados?",
                        "Salvar",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);

                if (resposta == 1) {
                    return;

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

        String extensaoImagem = this.imagemAnexar.getName().split("[.]")[1];

        String nomeImagem = criaNomeImagemAnexar(extensaoImagem, codigo, label);

        Etiqueta etiqueta = new Etiqueta(codigo, label, "0", nomeImagem, codigoEAN);

        try {

            if (this.etiquetaDAO.getEtiquetaPorCodigo(codigo) == null) {
                this.etiquetaDAO.insertEtiqueta(etiqueta);

            } else {
                this.etiquetaDAO.updateEtiqueta(etiqueta);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Não foi possível cadastrar a etiqueta. Causa: " + ex.getMessage());
            this.inputCodigo.setText("");
            this.inputLabel.setText("");
            this.inputEAN.setText("");
            voltaComIconePadrao();
            return;
        }

        listaEtiquetas = etiquetaDAO.getListaDeEtiquetasOrdenadaPorCodigo();

        atualizarTabelaDeCadastroEtiquetas(listaEtiquetas);

        copiarFotoParaPasta(codigo, label);

        this.inputCodigo.setText("");
        this.inputLabel.setText("");
        this.inputEAN.setText("");

        this.imagemAnexar = null;

        voltaComIconePadrao();

        atualizaListaEtiquetasDisponiveis();
    }//GEN-LAST:event_btnCadastrarEtiquetaActionPerformed

    private void copiarFotoParaPasta(String codigo, String label) {
        try {

            String caminhoResources = "resources";

            // Destino
            String extensaoImagem = this.imagemAnexar.getName().split("[.]")[1];

            Path destino = Paths.get(caminhoResources + "/fotos_etiquetas/" + criaNomeImagemAnexar(extensaoImagem, codigo, label));

            // Se a pessoa não estiver trocando a imagem:
            if (!destino.toString().equals(this.imagemAnexar.getPath())) {

                if (!Files.exists(destino)) {
                    Files.copy(this.imagemAnexar.toPath(), destino);

                } else {
                    Files.delete(destino);
                    Files.copy(this.imagemAnexar.toPath(), destino);
                }

            }

            System.out.println("Arquivo copiado com sucesso!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao copiar a imagem para a pasta de fotos. Detalhe: " + e.getMessage());
        }

    }

    private void voltaComIconePadrao() {

        try {

            String caminhoFoto = "resources/fotos_etiquetas/padrao.png";

            File a = new File(caminhoFoto);

            Image foto = ImageIO.read(a).getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);

            lblFoto.setIcon(new ImageIcon(foto));
            lblFoto.updateUI();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao ler imagem padrão: " + e.getMessage());

        }

    }

    private void btnCarregarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarFotoActionPerformed

        try {
            selecionarImagem();
        } catch (Exception ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnCarregarFotoActionPerformed

    private void selecionarImagem() throws Exception {

        String userHome = System.getProperty("user.home");
        String downloadDir = userHome + "/Downloads";

        JFileChooser chooser = new JFileChooser(downloadDir);

        chooser.setDialogTitle("Selecionar foto");

        chooser.setFileFilter(new FileNameExtensionFilter("Arquivos de imagens (*.PNG,*.JPG,*.JPEG)", "png", "jpg", "jpeg"));

        int resultado = chooser.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {

            try {

                this.imagemAnexar = chooser.getSelectedFile();

                Image foto = ImageIO.read(this.imagemAnexar).getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
                lblFoto.setIcon(new ImageIcon(foto));
                lblFoto.updateUI();

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Erro ao Ler a Imagem: " + e.getMessage());
            }

        } else {
            throw new Exception("Caixa de dialogo Fechada");
        }

    }

    private void tabelaEtiquetasSelecaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaEtiquetasSelecaoMouseClicked
        this.mostraPreviaImagemTabelaEtiquetasSelecao();
    }//GEN-LAST:event_tabelaEtiquetasSelecaoMouseClicked

    private void tabelaEtiquetasSelecaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaEtiquetasSelecaoKeyReleased
        this.mostraPreviaImagemTabelaEtiquetasSelecao();
    }//GEN-LAST:event_tabelaEtiquetasSelecaoKeyReleased

    private void carregaCamposComDadosDaEtiquetaSelecionada() {
        int linhaSelecionada = tabelaEtiquetas.getSelectedRow();

        String codigoSelecionado = tabelaEtiquetas.getValueAt(linhaSelecionada, 0).toString();

        Etiqueta etiqueta;

        try {
            etiqueta = this.etiquetaDAO.getEtiquetaPorCodigo(codigoSelecionado);

            this.inputCodigo.setText(etiqueta.getCodigo());
            this.inputLabel.setText(etiqueta.getLabel());
            this.inputEAN.setText(etiqueta.getCodigoEAN());

            this.imagemAnexar = new File("resources/fotos_etiquetas/" + etiqueta.getImagem());

            System.out.println("Etiqueta: " + etiqueta.getCodigo());
        } catch (SQLException ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void tabelaEtiquetasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaEtiquetasKeyReleased
        mostraPreviaImagemTabelaEtiquetas();
        carregaCamposComDadosDaEtiquetaSelecionada();
    }//GEN-LAST:event_tabelaEtiquetasKeyReleased

    private void tabelaEtiquetasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaEtiquetasMouseClicked
        mostraPreviaImagemTabelaEtiquetas();
        carregaCamposComDadosDaEtiquetaSelecionada();
    }//GEN-LAST:event_tabelaEtiquetasMouseClicked

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed

        SimpleDateFormat sdf = new SimpleDateFormat("dd_MM_yyyy_hh_mm");

        Map<String, Object> mapa = new HashMap<>();

        try {

            HistoricoDAO historicoDAO = new HistoricoDAO();

            String reportEtiqueta = "resources\\historico.jasper";
            String arquivoSaida = "relatorios_gerados\\historico_" + sdf.format(new Date()) + ".pdf";

            List<Historico> lista = historicoDAO.getHistoricoPorListaEtiqueta(listaEtiquetasSelecionadas);

            List<HistoricoRelatorio> listaHistoricoRelatorio = new ArrayList<>();
            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("America/Sao_Paulo"));

            // Começa o preenchimento dos meses
            Date dataAtual = new Date();
            cal.setTime(dataAtual);
            int primeiroMes = cal.get(Calendar.MONTH) + 1;

            for (int i = primeiroMes; listaHistoricoRelatorio.size() < 12; i--) {
                HistoricoRelatorio h = new HistoricoRelatorio();
                if (i == 1) {
                    h.setMes("JANEIRO");
                    h.setCodigoMes("1");

                }
                if (i == 2) {
                    h.setMes("FEVEREIRO");
                    h.setCodigoMes("2");

                }
                if (i == 3) {
                    h.setMes("MARÇO");
                    h.setCodigoMes("3");

                }
                if (i == 4) {
                    h.setMes("ABRIL");
                    h.setCodigoMes("4");

                }
                if (i == 5) {
                    h.setMes("MAIO");
                    h.setCodigoMes("5");

                }
                if (i == 6) {
                    h.setMes("JUNHO");
                    h.setCodigoMes("6");

                }
                if (i == 7) {
                    h.setMes("JULHO");
                    h.setCodigoMes("7");

                }
                if (i == 8) {
                    h.setMes("AGOSTO");
                    h.setCodigoMes("8");

                }
                if (i == 9) {
                    h.setMes("SETEMBRO");
                    h.setCodigoMes("9");

                }
                if (i == 10) {
                    h.setMes("OUTUBRO");
                    h.setCodigoMes("10");

                }
                if (i == 11) {
                    h.setMes("NOVEMBRO");
                    h.setCodigoMes("11");

                }
                if (i == 12) {
                    h.setMes("DEZEMBRO");
                    h.setCodigoMes("12");

                }
                if (i == 0) {
                    h.setMes("DEZEMBRO");
                    h.setCodigoMes("12");

                }
                if (i == -1) {
                    h.setMes("NOVEMBRO");
                    h.setCodigoMes("11");

                }
                if (i == -2) {
                    h.setMes("OUTUBRO");
                    h.setCodigoMes("10");

                }
                if (i == -3) {
                    h.setMes("SETEMBRO");
                    h.setCodigoMes("9");

                }
                if (i == -4) {
                    h.setMes("AGOSTO");
                    h.setCodigoMes("8");

                }
                if (i == -5) {
                    h.setMes("JULHO");
                    h.setCodigoMes("7");

                }
                if (i == -6) {
                    h.setMes("JUNHO");
                    h.setCodigoMes("6");

                }
                if (i == -7) {
                    h.setMes("MAIO");
                    h.setCodigoMes("5");

                }
                if (i == -8) {
                    h.setMes("ABRIL");
                    h.setCodigoMes("4");

                }
                if (i == -9) {
                    h.setMes("MARÇO");
                    h.setCodigoMes("3");

                }
                if (i == -10) {
                    h.setMes("FEVEREIRO");
                    h.setCodigoMes("2");

                }
                if (i == -11) {
                    h.setMes("JANEIRO");
                    h.setCodigoMes("1");

                }

                listaHistoricoRelatorio.add(h);

            }

            for (Historico his : lista) {

                adicionaHistoricoNaLista(his, listaHistoricoRelatorio);

            }

            // Atualiza o somatório de etiquetas. sem tempo para pensar em uma soluçao melhor
            for (HistoricoRelatorio h : listaHistoricoRelatorio) {
                h.setListaRelatorio();
            }

            JRBeanCollectionDataSource dadosSubRelatorio = new JRBeanCollectionDataSource(listaHistoricoRelatorio);
            mapa.put("lista", dadosSubRelatorio);

            JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(listaHistoricoRelatorio);

            JasperPrint jasperPrint = JasperFillManager.fillReport(reportEtiqueta, mapa, datasource);
            JasperExportManager.exportReportToPdfFile(jasperPrint, arquivoSaida);
            System.out.println("Relatório gerado com sucesso!!");

            File pdfFile = new File(arquivoSaida);
            Desktop.getDesktop().browse(pdfFile.toURI());
        } catch (Exception ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnRelatorioActionPerformed

    
    private void registrarNoRelatorio(){
    

            HistoricoDAO historicoDAO;
            try {
                historicoDAO = new HistoricoDAO();
                for (Etiqueta et : listaEtiquetasSelecionadas) {

                    historicoDAO.insertHistorico(et);

                }
                
                JOptionPane.showMessageDialog(this, "Registro de geração de etiquetas salva no banco de dados");

            } catch (SQLException ex) {
                Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
            }

    
    }
    
    private void btnRegistrarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarRelatorioActionPerformed
       registrarNoRelatorio();
    }//GEN-LAST:event_btnRegistrarRelatorioActionPerformed

    private void btnCadastrarEtiqueta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarEtiqueta2ActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnCadastrarEtiqueta2ActionPerformed

    private void antigoBotaoAtualizarFoto(){
    
         try {
            int linhaSelecionada = tabelaEtiquetas.getSelectedRow();

            String codigo = tabelaEtiquetas.getValueAt(linhaSelecionada, 0).toString();
            String label = tabelaEtiquetas.getValueAt(linhaSelecionada, 1).toString();

            selecionarImagem();

            String extensaoImagem = this.imagemAnexar.getName().split("[.]")[1];

            String nomeImagem = criaNomeImagemAnexar(extensaoImagem, codigo, label);

            this.etiquetaDAO.atualizaImagemEtiqueta(codigo, nomeImagem);
            copiarFotoParaPasta(codigo, label);

            JOptionPane.showMessageDialog(this, "Imagem atualizada com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar imagem: " + e.getMessage());
        }
    }
    
    private void limparCampos() {
        this.inputCodigo.setText("");
        this.inputLabel.setText("");
        this.inputEAN.setText("");
    }

    public void adicionaHistoricoNaLista(Historico historico, List<HistoricoRelatorio> listaHistoricoRelatorio) {

        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("America/Sao_Paulo"));
        cal.setTime(historico.getDataGeracao());
        int mesHistorico = cal.get(Calendar.MONTH) + 1;

        for (HistoricoRelatorio hr : listaHistoricoRelatorio) {
            if (Integer.parseInt(hr.getCodigoMes()) == mesHistorico) {
                hr.getListaDados().add(historico);
                break;
            }
        }

    }

    private void mostraPreviaImagemTabelaEtiquetasSelecao() {

        try {
            int linhaSelecionada = tabelaEtiquetasSelecao.getSelectedRow();

            String codigo = tabelaEtiquetasSelecao.getValueAt(linhaSelecionada, 0).toString();

            Etiqueta etiqueta = this.etiquetaDAO.getEtiquetaPorCodigo(codigo);

            File imagem = new File("resources/fotos_etiquetas/" + etiqueta.getImagem());

            Image foto = ImageIO.read(imagem).getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
            lblFoto.setIcon(new ImageIcon(foto));
            lblFoto.updateUI();

            System.out.println("Tabela clicada");
        } catch (Exception ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void mostraPreviaImagemTabelaEtiquetas() {

        try {
            int linhaSelecionada = tabelaEtiquetas.getSelectedRow();

            String codigo = tabelaEtiquetas.getValueAt(linhaSelecionada, 0).toString();

            Etiqueta etiqueta = this.etiquetaDAO.getEtiquetaPorCodigo(codigo);

            File imagem = new File("resources/fotos_etiquetas/" + etiqueta.getImagem());

            Image foto = ImageIO.read(imagem).getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_SMOOTH);
            lblFoto.setIcon(new ImageIcon(foto));
            lblFoto.updateUI();

        } catch (Exception ex) {
            Logger.getLogger(Etiquetas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private String criaNomeImagemAnexar(String extensao, String codigo, String label) {
        String nome = codigo + "_" + label + "." + extensao;

        return nome.replaceAll("-", "_").toLowerCase();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Etiquetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Etiquetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Etiquetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Etiquetas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Etiquetas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrarEtiqueta;
    private javax.swing.JButton btnCadastrarEtiqueta2;
    private javax.swing.JButton btnCarregarFoto;
    private javax.swing.JButton btnExcluirEtiqueta;
    private javax.swing.JButton btnExcluirLinha;
    private javax.swing.JButton btnGerarPDF;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnRegistrarRelatorio;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JComboBox<String> comboModeloEtiqueta;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField inputAutoComplete;
    private javax.swing.JTextField inputCodigo;
    private javax.swing.JTextField inputEAN;
    private javax.swing.JTextField inputLabel;
    private javax.swing.JTextField inputQuantidade;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelCodigo;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JTable tabelaEtiquetas;
    private javax.swing.JTable tabelaEtiquetasSelecao;
    private javax.swing.JTable tabelaQuantidade;
    // End of variables declaration//GEN-END:variables
}
